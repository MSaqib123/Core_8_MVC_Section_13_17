@using Services.Enums;
@model List<PersonResponse>



<div class="container">
    <form action="~/Person/PersonList" method="get">

        <h2>Person List</h2>

        <div class="box d-flex my-3">
            <div class="flex-1 me-2">
                <select class="form-select" name="searchBy">
                    @foreach (var field in ViewBag.SearchFields)
                    {
                        <option value="@field.Key">@field.Value</option>
                    }
                </select>
            </div>
            <div class="flex-1 me-2">
                <input type="text" id="search" class="form-control" placeholder="Search" name="searchString" />
            </div>
            <div class="flex-1 me-2">
                <button class="btn btn-primary">Search</button>
                <a href="~/Person/PersonList" class="btn btn-danger">Clear</a>
            </div>
        </div>

        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>Person ID</th>
                    @await Html.PartialAsync("_GridColumnHeader",new ViewDataDictionary(ViewData){
                    {"ColumnName",nameof(PersonResponse.PersonName)},
                    {"DisplayName","Person Name"},
                    })
                    @await Html.PartialAsync("_GridColumnHeader",new ViewDataDictionary(ViewData){
                    {"ColumnName",nameof(PersonResponse.Email)},
                    {"DisplayName","Email"},
                    })
                    @await Html.PartialAsync("_GridColumnHeader",new ViewDataDictionary(ViewData){
                    {"ColumnName",nameof(PersonResponse.DateOfBirth)},
                    {"DisplayName","Date of Birth"},
                    })
                    @await Html.PartialAsync("_GridColumnHeader",new ViewDataDictionary(ViewData){
                    {"ColumnName",nameof(PersonResponse.Gender)},
                    {"DisplayName","Gender"},
                    })
                    @await Html.PartialAsync("_GridColumnHeader",new ViewDataDictionary(ViewData){
                    {"ColumnName",nameof(PersonResponse.Country)},
                    {"DisplayName","Country"},
                    })
                    @await Html.PartialAsync("_GridColumnHeader",new ViewDataDictionary(ViewData){
                    {"ColumnName",nameof(PersonResponse.Address)},
                    {"DisplayName","Address"},
                    })
                    @await Html.PartialAsync("_GridColumnHeader",new ViewDataDictionary(ViewData){
                    {"ColumnName",nameof(PersonResponse.ReceiveNewLetters)},
                    {"DisplayName","Receive Newsletters"},
                    })
                    @await Html.PartialAsync("_GridColumnHeader",new ViewDataDictionary(ViewData){
                    {"ColumnName",nameof(PersonResponse.Age)},
                    {"DisplayName","Age"},
                    })
                </tr>
            </thead>
            <tbody>
                @foreach (var person in Model)
                {
                    <tr>
                        <td>@person.PersonID</td>
                        <td>@person.PersonName</td>
                        <td>@person.Email</td>
                        <td>@(person.DateOfBirth.HasValue ? person.DateOfBirth.Value.ToString("yyyy-MM-dd") : "")</td>
                        <td>@person.Gender</td>
                        <td>@person.Country</td>
                        <td>@person.Address</td>
                        <td>@(person.ReceiveNewLetters.HasValue && person.ReceiveNewLetters.Value ? "Yes" : "No")</td>
                        <td>@person.Age</td>
                    </tr>
                }
            </tbody>
        </table>

    </form>
</div>